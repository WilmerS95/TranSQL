@using Microsoft.AspNetCore.Components.Authorization

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            <NotAuthorized>
                @if (!isAuthenticated)
                {
                    <RedirectToLogin />
                }
                else
                {
                    <p>Sorry, you are not authorized to access this resource.</p>
                }
            </NotAuthorized>
        </AuthorizeRouteView>
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        // Verificar si el usuario está autenticado al cargar la aplicación
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity != null && authState.User.Identity.IsAuthenticated;

        // Redirigir al login si no está autenticado y la URL actual es la base ("/")
        if (!isAuthenticated && NavigationManager.Uri == NavigationManager.BaseUri)
        {
            NavigationManager.NavigateTo("/login", true);
        }
    }

    private RenderFragment RedirectToLogin => builder =>
    {
        NavigationManager.NavigateTo("/login", true);
    };
}
