@using TranSQL.client.Services
@using Microsoft.AspNetCore.Components.Authorization

@inject TokenAuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits LayoutComponentBase

<div class="page">
    <!-- Barra de navegación superior -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <ul class="navbar-nav me-auto">
                @if (isAuthenticated)
                {
                    <li class="nav-item">
                        <a class="nav-link text-white" href="javascript:void(0)" @onclick="IrHome">
                            <i class="bi bi-house-door me-1"></i> Home
                        </a>
                    </li>
                }
            </ul>
            @if (isAuthenticated)
            {
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link text-danger" href="javascript:void(0)" @onclick="HandleLogout">
                            <i class="bi bi-box-arrow-right me-1"></i> Logout
                        </a>
                    </li>
                </ul>
            }
        </div>
    </nav>

    <main class="container mt-4">
        @Body
    </main>
</div>

@code {
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += AuthStateChanged;
        await CheckAuthenticationAsync();
    }

    private async Task CheckAuthenticationAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        StateHasChanged();
    }

    private async void AuthStateChanged(Task<AuthenticationState> task)
    {
        await CheckAuthenticationAsync();
    }

    private async Task HandleLogout()
    {
        await AuthStateProvider.LogoutAsync();
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }

    private void IrHome()
    {
        NavigationManager.NavigateTo("/main-dashboard");
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= AuthStateChanged;
    }
}
