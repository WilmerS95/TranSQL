@page "/vehiculos"

@using TranSQL.client.Services
@using TranSQL.shared.DTO
@inject IVehiculoService VehiculoService

<h3>Gestión de Vehículos</h3>

@if (vehiculos != null)
{
    @foreach (var vehiculo in vehiculos)
    {
        <div>
            <h4>Placa: @vehiculo.Placa</h4>
            <p>Modelo: @vehiculo.Modelo</p>
            <p>Odómetro Inicial: @vehiculo.OdometroInicial</p>
            <p>Odómetro Final: @vehiculo.OdometroFinal</p>
            <p>Estado: @vehiculo.EstadoVehiculo</p>
            <p>Tipo de Vehículo: @vehiculo.TipoVehiculo</p>

            <h5>Asignaciones</h5>
            <ul>
                @foreach (var asignacion in vehiculo.Asignaciones)
                {
                    <li>
                        <p>Solicitud: @asignacion.SolicitudReservacion.Motivo</p>
                        <p>Fecha: @asignacion.SolicitudReservacion.Fecha.ToShortDateString()</p>
                        <p>Colaborador: @asignacion.Colaborador.PrimerNombre @asignacion.Colaborador.PrimerApellido</p>
                    </li>
                }
            </ul>

            <label>Actualizar Estado:</label>
            <select @onchange="(e) => CambiarEstadoVehiculo(vehiculo.Placa, e.Value.ToString())">
                <option value="1">Disponible</option>
                <option value="2">Reservado</option>
                <option value="3">En Ruta</option>
            </select>
        </div>
    }
}
else
{
    <p>Cargando vehículos...</p>
}

@code {
    private List<VehiculoAsignacionDTO> vehiculos;

    protected override async Task OnInitializedAsync()
    {
        vehiculos = await VehiculoService.ObtenerVehiculosAsignadosAsync();
    }

    private async Task CambiarEstadoVehiculo(string placa, string nuevoEstado)
    {
        if (int.TryParse(nuevoEstado, out int estadoId))
        {
            await VehiculoService.UpdateVehiculoEstadoAsync(placa, estadoId);
            vehiculos = await VehiculoService.ObtenerVehiculosAsignadosAsync();
            StateHasChanged();
        }
    }
}
