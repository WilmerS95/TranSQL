@using CurrieTechnologies.Razor.SweetAlert2
@using Blazored.LocalStorage
@using TranSQL.client.Services
@using TranSQL.shared.DTO

@page "/login"
@inject HttpClient Http
@inject TokenAuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header text-center">
                    <h3>Iniciar sesión</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="form-group mb-3">
                            <label for="username" class="form-label">Correo electrónico</label>
                            <InputText id="username" @bind-Value="loginModel.Username" class="form-control" placeholder="Ingrese su correo" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password" class="form-label">Contraseña</label>
                            <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" placeholder="Ingrese su contraseña" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-block">Iniciar sesión</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    @* <p class="text-muted">¿Olvidaste tu contraseña?</p> *@
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequestDTO loginModel = new LoginRequestDTO();

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResponseDTO>();
            await LocalStorage.SetItemAsync("authToken", result.Token);

            AuthenticationStateProvider.MarkUserAsAuthenticated(result.Token);
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", result.Token);

            //Redirige si el login es exitoso
            NavigationManager.NavigateTo("/main-dashboard");
        }
        else
        {
            // Mostrar alerta SweetAlert2 en caso de error de autenticación
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error de autenticación",
                    Text = "Las credenciales no son válidas, por favor verifica tu correo y contraseña.",
                    Icon = SweetAlertIcon.Error
                });
        }
    }
}
