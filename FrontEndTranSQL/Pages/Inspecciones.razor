@page "/inspecciones"
@using TranSQL.client.Services
@using TranSQL.shared.models
@inject InspeccionVehiculoService InspeccionService
@inject IJSRuntime jsRuntime

<h3>Gestión de Inspecciones de Vehículos</h3>

@if (inspecciones == null)
{
    <p>Cargando inspecciones...</p>
}
else
{
    <button class="btn btn-primary my-3" @onclick="MostrarFormularioAgregar">Agregar Nueva Inspección</button>

    <table class="table table-hover table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Fecha</th>
                <th>Observaciones</th>
                <th>Odómetro Inicial</th>
                <th>Odómetro Final</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inspeccion in inspecciones)
            {
                <tr>
                    <td>@inspeccion.FechaInspeccion.ToShortDateString()</td>
                    <td>@inspeccion.Observaciones</td>
                    <td>@inspeccion.OdometroInicial</td>
                    <td>@inspeccion.OdometroFinal</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => EditarInspeccion(inspeccion.IdInspeccion)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => EliminarInspeccion(inspeccion.IdInspeccion)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="border p-3 my-4">
        <h4>@(editarInspeccion.IdInspeccion > 0 ? "Editar Inspección" : "Agregar Inspección")</h4>
        <EditForm Model="editarInspeccion" OnValidSubmit="GuardarInspeccion">
            <div class="mb-3">
                <label>Fecha:</label>
                <InputDate @bind-Value="editarInspeccion.FechaInspeccion" class="form-control" />
            </div>

            <div class="mb-3">
                <label>Tipo de Inspección:</label>
                <InputSelect @bind-Value="tipoInspeccionSeleccionado" class="form-control" @onchange="CargarDetallesVehiculo">
                    <option value="">Seleccione el tipo de inspección</option>
                    <option value="Inicial">Inspección Inicial</option>
                    <option value="Final">Inspección Final</option>
                </InputSelect>
            </div>

            @if (tipoInspeccionSeleccionado == "Inicial")
            {
                <div>
                    <label>Vehículo Solicitado:</label>
                    <InputSelect @bind-Value="vehiculoSeleccionado" class="form-control" @onchange="SetOdometerInicial">
                        <option value="">Seleccione un vehículo</option>
                        @foreach (var vehiculo in vehiculosSolicitados)
                        {
                            <option value="@vehiculo.Placa">@vehiculo.Placa</option>
                        }
                    </InputSelect>
                </div>
                <div class="mt-3">
                    <label>Odómetro Inicial:</label>
                    <span class="form-control">@editarInspeccion.OdometroInicial</span>
                </div>
            }
            else if (tipoInspeccionSeleccionado == "Final")
            {
                <div>
                    <label>Vehículo en Ruta:</label>
                    <InputSelect @bind-Value="vehiculoSeleccionado" class="form-control" @onchange="SetOdometerFinal">
                        <option value="">Seleccione un vehículo</option>
                        @foreach (var vehiculo in vehiculosEnRuta)
                        {
                            <option value="@vehiculo.Placa">@vehiculo.Placa</option>
                        }
                    </InputSelect>
                </div>
                <div class="mt-3">
                    <label>Odómetro Inicial:</label>
                    <span class="form-control">@editarInspeccion.OdometroInicial</span>
                </div>
                <div class="mt-3">
                    <label>Odómetro Final:</label>
                    <InputNumber @bind-Value="editarInspeccion.OdometroFinal" class="form-control" @oninput="CalcularKmsRecorridos" />
                </div>
                <div class="mt-3">
                    <label>Kilómetros Recorridos:</label>
                    <span class="form-control">@kmsRecorridos</span>
                </div>
            }

            <div class="mb-3">
                <label>Observaciones:</label>
                <InputText @bind-Value="editarInspeccion.Observaciones" class="form-control" />
            </div>

            <div class="mb-3">
                <label>Cargar Imágenes:</label>
                <InputFile OnChange="HandleImagenSeleccionada" multiple />
            </div>

            <button type="submit" class="btn btn-success">Guardar</button>
            <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
        </EditForm>
    </div>
}

@code {
    private List<InspeccionVehiculo> inspecciones;
    private List<Vehiculo> vehiculosSolicitados = new List<Vehiculo>();
    private List<Vehiculo> vehiculosEnRuta = new List<Vehiculo>();
    private bool mostrarFormulario = false;
    private InspeccionVehiculo editarInspeccion = new InspeccionVehiculo();
    private List<IBrowserFile> imagenesSeleccionadas = new List<IBrowserFile>();
    private string tipoInspeccionSeleccionado;
    private int kmsRecorridos = 0;
    private Vehiculo vehiculoSeleccionado;

    protected override async Task OnInitializedAsync()
    {
        await CargarInspecciones();
        await CargarVehiculos();
    }

    private async Task CargarInspecciones()
    {
        var inspeccionesDTO = await InspeccionService.GetInspeccionesAsync();
        inspecciones = inspeccionesDTO.Select(dto => new InspeccionVehiculo
        {
            IdInspeccion = dto.IdInspeccion,
            FechaInspeccion = dto.FechaInspeccion,
            Observaciones = dto.Observaciones,
            OdometroInicial = dto.OdometroInicial,
            OdometroFinal = dto.OdometroFinal,
            ImagenRuta = dto.ImagenRuta,
        }).ToList();
    }

    private async Task CargarVehiculos()
    {
        vehiculosSolicitados = await InspeccionService.GetVehiculosPorEstado("Solicitado");
        vehiculosEnRuta = await InspeccionService.GetVehiculosPorEstado("En Ruta");
    }

    private void MostrarFormularioAgregar()
    {
        editarInspeccion = new InspeccionVehiculo { FechaInspeccion = DateTime.Now };
        mostrarFormulario = true;
    }

    private async Task GuardarInspeccion()
    {
        if (tipoInspeccionSeleccionado == "Final" && editarInspeccion.OdometroFinal <= editarInspeccion.OdometroInicial)
        {
            await jsRuntime.InvokeVoidAsync("alert", "El odómetro final debe ser mayor que el inicial.");
            return;
        }

        if (editarInspeccion.IdInspeccion == 0)
        {
            await InspeccionService.CreateInspeccionAsync(editarInspeccion);
        }
        else
        {
            await InspeccionService.UpdateInspeccionAsync(editarInspeccion.IdInspeccion, editarInspeccion);
        }

        foreach (var imagen in imagenesSeleccionadas)
        {
            await InspeccionService.SubirImagenAsync(editarInspeccion.IdInspeccion, imagen);
        }

        mostrarFormulario = false;
        await CargarInspecciones();
        imagenesSeleccionadas.Clear();
    }

    private void HandleImagenSeleccionada(InputFileChangeEventArgs e)
    {
        imagenesSeleccionadas = e.GetMultipleFiles().ToList();
    }

    private void SetOdometerInicial()
    {
        editarInspeccion.OdometroInicial = vehiculoSeleccionado.OdometroFinal;
    }

    private void SetOdometerFinal()
    {
        editarInspeccion.OdometroInicial = vehiculoSeleccionado.OdometroInicial;
    }

    private void CalcularKmsRecorridos(ChangeEventArgs e)
    {
        editarInspeccion.OdometroFinal = int.Parse(e.Value.ToString());
        kmsRecorridos = (editarInspeccion.OdometroFinal ?? 0) - (editarInspeccion.OdometroInicial ?? 0);
    }

    private void EditarInspeccion(int id)
    {
        editarInspeccion = inspecciones.First(i => i.IdInspeccion == id);
        mostrarFormulario = true;
    }

    private async Task EliminarInspeccion(int id)
    {
        await InspeccionService.DeleteInspeccionAsync(id);
        await CargarInspecciones();
    }

    private async Task CargarDetallesVehiculo()
    {
        if (tipoInspeccionSeleccionado == "Inicial")
        {
            vehiculosSolicitados = await InspeccionService.GetVehiculosPorEstado("Solicitado");
        }
        else if (tipoInspeccionSeleccionado == "Final")
        {
            vehiculosEnRuta = await InspeccionService.GetVehiculosPorEstado("En Ruta");
        }
    }


    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}
