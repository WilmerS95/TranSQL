@inject HttpClient Http

<Dialog IsVisible="IsModalVisible" OnClose="CloseModal">
    <DialogTitle>Rechazar Solicitud</DialogTitle>
    <DialogContent>
        <label for="motivoRechazo">Motivo de Rechazo:</label>
        <InputTextArea id="motivoRechazo" class="form-control" @bind-Value="MotivoRechazo" />
        @if (string.IsNullOrEmpty(MotivoRechazo) && isConfirmAttempted)
        {
            <p class="text-danger">El motivo de rechazo es obligatorio.</p>
        }
    </DialogContent>
    <DialogActions>
        <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
        <button class="btn btn-danger" @onclick="ConfirmarRechazo">Rechazar</button>
    </DialogActions>
</Dialog>

@code {
    [Parameter] public int SolicitudId { get; set; }
    [Parameter] public EventCallback OnRechazado { get; set; }

    public bool IsModalVisible { get; set; } = false;
    private bool isConfirmAttempted;
    public string MotivoRechazo { get; set; } = string.Empty;

    public void Show(int solicitudId)
    {
        SolicitudId = solicitudId;
        IsModalVisible = true;
        MotivoRechazo = string.Empty;
        isConfirmAttempted = false;
    }

    private void CloseModal()
    {
        IsModalVisible = false;
    }

    private async Task ConfirmarRechazo()
    {
        isConfirmAttempted = true;

        if (!string.IsNullOrEmpty(MotivoRechazo))
        {
            var data = new { IdSolicitud = SolicitudId, MotivoRechazo = MotivoRechazo };
            var response = await Http.PostAsJsonAsync($"api/solicitudesreservacion/rechazar/{SolicitudId}", data);

            if (response.IsSuccessStatusCode)
            {
                await OnRechazado.InvokeAsync();
                CloseModal();
            }
            else
            {
                Console.WriteLine("Error al rechazar la solicitud.");
            }
        }
    }
}
