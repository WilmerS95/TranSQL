@page "/logistica-solicitudes"
@using CurrieTechnologies.Razor.SweetAlert2
@using TranSQL.shared.DTO
@inject HttpClient Http
@inject SweetAlertService Swal

<h3 class="text-center mt-4 mb-4">Gestión de Solicitudes - Logística</h3>

@if (solicitudes != null && solicitudes.Any())
{
    <div class="table-responsive">
        <table class="table table-hover table-bordered table-striped align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Motivo de Solicitud</th>
                    <th>Fecha</th>
                    <th>Estado</th>
                    <th>Motivo de rechazo</th>
                    <th class="text-center">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var solicitud in solicitudes)
                {
                    <tr>
                        <td>@solicitud.Motivo</td>
                        <td>@solicitud.Fecha.ToShortDateString()</td>
                        <td>@solicitud.EstadoSolicitud?.NombreEstadoSolicitud</td>
                        <td>
                            <input type="text" class="form-control" @bind="@solicitud.MotivoAccion" placeholder="Escribe el motivo" />
                            @if (solicitud.IsRechazarIntentado && string.IsNullOrEmpty(solicitud.MotivoAccion))
                            {
                                <p class="text-danger mt-1">El motivo de rechazo es obligatorio.</p>
                            }
                        </td>
                        <td class="text-center">
                            <button class="btn btn-success btn-sm me-2" @onclick="() => ConfirmarAceptar(solicitud)">Aceptar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmarRechazar(solicitud)">Rechazar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p class="text-center">No hay solicitudes pendientes.</p>
}

@code {
    private List<SolicitudReservacionLogisticaDTO> solicitudes = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarSolicitudes();
    }

    private async Task CargarSolicitudes()
    {
        solicitudes = await Http.GetFromJsonAsync<List<SolicitudReservacionLogisticaDTO>>("api/solicitudesreservacion/pendientes");
    }

    private async Task ConfirmarAceptar(SolicitudReservacionLogisticaDTO solicitud)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "¿Deseas aprobar esta solicitud?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, aprobar",
                CancelButtonText = "Cancelar"
            });

        if (result.IsConfirmed)
        {
            await AceptarSolicitud(solicitud);
        }
    }

    private async Task ConfirmarRechazar(SolicitudReservacionLogisticaDTO solicitud)
    {
        solicitud.IsRechazarIntentado = true;

        if (string.IsNullOrEmpty(solicitud.MotivoAccion))
        {
            await Swal.FireAsync("Error", "El motivo de rechazo es obligatorio.", SweetAlertIcon.Error);
            return;
        }

        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "¿Deseas rechazar esta solicitud?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, rechazar",
                CancelButtonText = "Cancelar"
            });

        if (result.IsConfirmed)
        {
            await RechazarSolicitud(solicitud);
        }
    }

    private async Task AceptarSolicitud(SolicitudReservacionLogisticaDTO solicitud)
    {
        var data = new { MotivoAprobacion = solicitud.MotivoAccion };
        var response = await Http.PutAsJsonAsync($"api/solicitudesreservacion/aprobar/{solicitud.IdSolicitud}", data);

        if (response.IsSuccessStatusCode)
        {
            await Swal.FireAsync("Aprobado", "La solicitud ha sido aprobada con éxito.", SweetAlertIcon.Success);
            await CargarSolicitudes();
        }
        else
        {
            await Swal.FireAsync("Error", "Hubo un problema al aprobar la solicitud.", SweetAlertIcon.Error);
        }
    }

    private async Task RechazarSolicitud(SolicitudReservacionLogisticaDTO solicitud)
    {
        var data = new { MotivoRechazo = solicitud.MotivoAccion };
        var response = await Http.PutAsJsonAsync($"api/solicitudesreservacion/rechazar/{solicitud.IdSolicitud}", data);

        if (response.IsSuccessStatusCode)
        {
            solicitud.IsRechazarIntentado = false;
            await Swal.FireAsync("Rechazada", "La solicitud ha sido rechazada con éxito.", SweetAlertIcon.Success);
            await CargarSolicitudes();
        }
        else
        {
            await Swal.FireAsync("Error", "Hubo un problema al rechazar la solicitud.", SweetAlertIcon.Error);
        }
    }
}
